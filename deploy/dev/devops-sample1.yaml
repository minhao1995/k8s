apiVersion: apps/v1 #与k8s集群版本有关，使用 kubectl api-versions 即可查看当前集群支持的版本
kind: Deployment #该配置的类型，我们使用的是 Deployment
metadata: #译名为元数据，即 Deployment 的一些基本属性和信息
  labels: #标签，可以灵活定位一个或多个资源，其中key和value均可自定义，可以定义多组，目前不需要理解
    app: kubesphere
    component: ks-sample-dev
    tier: backend
  name: ks-sample-dev #Deployment 的名称
  namespace: kubesphere-sample-dev2
spec: #这是关于该Deployment的描述，可以理解为你期待该Deployment在k8s中如何使用
  progressDeadlineSeconds: 600
  replicas: 1 #使用该Deployment创建一个应用程序实例
  selector: #标签选择器，与上面的标签共同作用，目前不需要理解
    matchLabels: #选择包含标签app:nginx的资源
      app: kubesphere
      component: ks-sample-dev
      tier: backend
  template: #这是选择或创建的Pod的模板
    metadata: #Pod的元数据
      labels: #Pod的标签，上面的selector即选择包含标签app:nginx的Pod
        app: kubesphere
        component: ks-sample-dev
        tier: backend
    spec: #期望Pod实现的功能（即在pod中部署）
      containers: #生成container，与docker中的container是同一种
        - env:
            - name: CACHE_IGNORE
              value: js|html
            - name: CACHE_PUBLIC_EXPIRATION
              value: 3d
          image: $REGISTRY/$DOCKERHUB_NAMESPACE:SNAPSHOT-$APP_NAME-$BUILD_NUMBER #使用镜像nginx:1.7.9创建container，该container默认80端口可访问
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            timeoutSeconds: 10
            failureThreshold: 30
            periodSeconds: 5
          imagePullPolicy: Always
          name: ks-sample #container的名称
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: 600m
              memory: 1600Mi
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30